#!/usr/bin/env node

// Generated by CoffeeScript 1.7.1
(function() {
  var IncomingForm, config, createTransport, http, smtp;

  IncomingForm = require('formidable').IncomingForm;

  createTransport = require('nodemailer').createTransport;

  http = require('http');

  config = exports.config = {
    listen: {
      host: 'localhost',
      port: 8080
    },
    transport: {
      name: 'Direct'
    },
    recipients: {}
  };

  smtp = null;

  exports.loadConfig = function(filename) {
    console.log("Loading config from " + filename + "...");
    return config = require(filename);
  };

  exports.handler = function(req, res) {
    var form;
    form = new IncomingForm();
    if (!smtp) {
      smtp = createTransport(config.transport.name, config.transport.options);
    }
    return form.parse(req, function(err, fields, files) {
      var attachments, f, options, recipient;
      recipient = config.recipients[fields.recipient];
      if (!recipient) {
        res.writeHead(400, {
          'content-type': 'text/plain'
        });
        return res.end("Invalid recipient " + fields.recipient);
      }
      console.log("" + fields.from + " -> " + recipient.to);
      console.log("Message: " + fields.message);
      options = {
        from: fields.from,
        replyTo: fields.from,
        to: recipient.to,
        subject: fields.title || recipient.title
      };
      if (recipient.allowFiles) {
        attachments = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            f = files[_i];
            _results.push({
              fileName: f.name,
              filePath: f.path
            });
          }
          return _results;
        })();
        options.attachments = attachments;
      }
      return smtp.sendMail(options, function(err, response) {
        if (err) {
          res.writeHead(500, {
            'content-type': 'text/plain'
          });
          return res.end(err.toString());
        }
        res.writeHead(200, {
          'content-type': 'text/plain'
        });
        return res.end('Successfully sent email');
      });
    });
  };

  exports.runServer = function() {
    var app;
    app = http.createServer(function(req, res) {
      if (req.url === '/' && req.method.toLowerCase() === 'post') {
        return exports.handler(req, res);
      }
    });
    return app.listen(config.listen.port, config.listen.host, function() {
      return console.log("Lisenting on " + config.listen.host + ":" + config.listen.port);
    });
  };

  if (require.main === module) {
    if (process.argv.length > 2) {
      exports.loadConfig(require('path').resolve(process.argv[2]));
    }
    exports.runServer();
  }

}).call(this);
